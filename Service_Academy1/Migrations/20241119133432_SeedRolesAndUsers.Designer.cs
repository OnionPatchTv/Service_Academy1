// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Service_Academy1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241119133432_SeedRolesAndUsers")]
    partial class SeedRolesAndUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Service_Academy1.Models.ActivitiesModel", b =>
                {
                    b.Property<int>("ActivitiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ActivitiesId"));

                    b.Property<string>("ActivitiesTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActivityDirection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProgramId")
                        .HasColumnType("integer");

                    b.Property<int>("TotalScore")
                        .HasColumnType("integer");

                    b.HasKey("ActivitiesId");

                    b.HasIndex("ProgramId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Service_Academy1.Models.AnnouncementModel", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AnnouncementId"));

                    b.Property<string>("Announcement")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProgramId")
                        .HasColumnType("integer");

                    b.HasKey("AnnouncementId");

                    b.HasIndex("ProgramId");

                    b.ToTable("Announcemnets");
                });

            modelBuilder.Entity("Service_Academy1.Models.AnswerModel", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Service_Academy1.Models.DepartmentsModel", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Service_Academy1.Models.EnrollmentModel", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EnrollmentId"));

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EnrollmentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProgramId")
                        .HasColumnType("integer");

                    b.Property<string>("ProgramStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReasonForDenial")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TraineeId")
                        .HasColumnType("text");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("TraineeId");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("Service_Academy1.Models.EvaluationCriteria", b =>
                {
                    b.Property<int>("CriteriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CriteriaId"));

                    b.Property<string>("CriteriaName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CriteriaId");

                    b.ToTable("EvaluationCriteria");
                });

            modelBuilder.Entity("Service_Academy1.Models.EvaluationQuestionModel", b =>
                {
                    b.Property<int>("EvaluationQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EvaluationQuestionId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProgramId")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EvaluationQuestionId");

                    b.HasIndex("ProgramId");

                    b.ToTable("EvaluationQuestions");
                });

            modelBuilder.Entity("Service_Academy1.Models.EvaluationResponseModel", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResponseId"));

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("integer");

                    b.Property<int>("EvaluationQuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("ResponseId");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("EvaluationQuestionId");

                    b.ToTable("EvaluationResponses");
                });

            modelBuilder.Entity("Service_Academy1.Models.ModuleModel", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ModuleId"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LinkPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProgramId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ModuleId");

                    b.HasIndex("ProgramId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Service_Academy1.Models.ProgramManagementModel", b =>
                {
                    b.Property<int>("ProgramManagementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProgramManagementId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("IsApproved")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<int>("ProgramId")
                        .HasColumnType("integer");

                    b.Property<string>("ReasonForDenial")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ProgramManagementId");

                    b.HasIndex("ProgramId");

                    b.ToTable("ProgramManagement");
                });

            modelBuilder.Entity("Service_Academy1.Models.ProgramsModel", b =>
                {
                    b.Property<int>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProgramId"));

                    b.Property<string>("Agenda")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectLeader")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectLeaderId")
                        .HasColumnType("text");

                    b.Property<string>("SDG")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProgramId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ProjectLeaderId");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("Service_Academy1.Models.QuestionModel", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuizId")
                        .HasColumnType("integer");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Service_Academy1.Models.QuizModel", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuizId"));

                    b.Property<int>("ProgramId")
                        .HasColumnType("integer");

                    b.Property<string>("QuizDirection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QuizTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("QuizId");

                    b.HasIndex("ProgramId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("Service_Academy1.Models.TraineeActivitiesModel", b =>
                {
                    b.Property<int>("TraineeActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TraineeActivityId"));

                    b.Property<int>("ActivitiesId")
                        .HasColumnType("integer");

                    b.Property<int>("ComputedScore")
                        .HasColumnType("integer");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("integer");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LinkPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RawScore")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TraineeActivityId");

                    b.HasIndex("ActivitiesId");

                    b.HasIndex("EnrollmentId");

                    b.ToTable("TraineeActivities");
                });

            modelBuilder.Entity("Service_Academy1.Models.TraineeAnswerModel", b =>
                {
                    b.Property<int>("TraineeAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TraineeAnswerId"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("TraineeQuizResultId")
                        .HasColumnType("integer");

                    b.HasKey("TraineeAnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TraineeQuizResultId");

                    b.ToTable("TraineeAnswers");
                });

            modelBuilder.Entity("Service_Academy1.Models.TraineeModuleResult", b =>
                {
                    b.Property<int>("TraineeModuleResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TraineeModuleResultId"));

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer");

                    b.HasKey("TraineeModuleResultId");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("ModuleId");

                    b.ToTable("TraineeModuleResults");
                });

            modelBuilder.Entity("Service_Academy1.Models.TraineeQuizResultModel", b =>
                {
                    b.Property<int>("TraineeQuizResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TraineeQuizResultId"));

                    b.Property<double>("ComputedScore")
                        .HasColumnType("double precision");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<int>("QuizId")
                        .HasColumnType("integer");

                    b.Property<int>("RawScore")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Retries")
                        .HasColumnType("integer");

                    b.Property<int>("TotalScore")
                        .HasColumnType("integer");

                    b.HasKey("TraineeQuizResultId");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("QuizId");

                    b.ToTable("TraineeQuizResults");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Service_Academy1.Models.ActivitiesModel", b =>
                {
                    b.HasOne("Service_Academy1.Models.ProgramsModel", "ProgramsModel")
                        .WithMany("Activities")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgramsModel");
                });

            modelBuilder.Entity("Service_Academy1.Models.AnnouncementModel", b =>
                {
                    b.HasOne("Service_Academy1.Models.ProgramsModel", "ProgramsModel")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgramsModel");
                });

            modelBuilder.Entity("Service_Academy1.Models.AnswerModel", b =>
                {
                    b.HasOne("Service_Academy1.Models.QuestionModel", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Service_Academy1.Models.EnrollmentModel", b =>
                {
                    b.HasOne("Service_Academy1.Models.ProgramsModel", "ProgramsModel")
                        .WithMany("Enrollments")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "CurrentTrainee")
                        .WithMany()
                        .HasForeignKey("TraineeId");

                    b.Navigation("CurrentTrainee");

                    b.Navigation("ProgramsModel");
                });

            modelBuilder.Entity("Service_Academy1.Models.EvaluationQuestionModel", b =>
                {
                    b.HasOne("Service_Academy1.Models.ProgramsModel", "ProgramsModel")
                        .WithMany("EvaluationQuestions")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgramsModel");
                });

            modelBuilder.Entity("Service_Academy1.Models.EvaluationResponseModel", b =>
                {
                    b.HasOne("Service_Academy1.Models.EnrollmentModel", "Enrollment")
                        .WithMany()
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service_Academy1.Models.EvaluationQuestionModel", "EvaluationQuestions")
                        .WithMany("Responses")
                        .HasForeignKey("EvaluationQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enrollment");

                    b.Navigation("EvaluationQuestions");
                });

            modelBuilder.Entity("Service_Academy1.Models.ModuleModel", b =>
                {
                    b.HasOne("Service_Academy1.Models.ProgramsModel", "ProgramsModel")
                        .WithMany("Modules")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgramsModel");
                });

            modelBuilder.Entity("Service_Academy1.Models.ProgramManagementModel", b =>
                {
                    b.HasOne("Service_Academy1.Models.ProgramsModel", "ProgramsModel")
                        .WithMany("ProgramManagement")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgramsModel");
                });

            modelBuilder.Entity("Service_Academy1.Models.ProgramsModel", b =>
                {
                    b.HasOne("Service_Academy1.Models.DepartmentsModel", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "CurrentProjectLeader")
                        .WithMany()
                        .HasForeignKey("ProjectLeaderId");

                    b.Navigation("CurrentProjectLeader");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Service_Academy1.Models.QuestionModel", b =>
                {
                    b.HasOne("Service_Academy1.Models.QuizModel", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Service_Academy1.Models.QuizModel", b =>
                {
                    b.HasOne("Service_Academy1.Models.ProgramsModel", "ProgramsModel")
                        .WithMany("Quizzes")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgramsModel");
                });

            modelBuilder.Entity("Service_Academy1.Models.TraineeActivitiesModel", b =>
                {
                    b.HasOne("Service_Academy1.Models.ActivitiesModel", "Activities")
                        .WithMany("TraineeActivities")
                        .HasForeignKey("ActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service_Academy1.Models.EnrollmentModel", "Enrollment")
                        .WithMany()
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activities");

                    b.Navigation("Enrollment");
                });

            modelBuilder.Entity("Service_Academy1.Models.TraineeAnswerModel", b =>
                {
                    b.HasOne("Service_Academy1.Models.QuestionModel", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service_Academy1.Models.TraineeQuizResultModel", "TraineeQuizResult")
                        .WithMany("TraineeAnswers")
                        .HasForeignKey("TraineeQuizResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TraineeQuizResult");
                });

            modelBuilder.Entity("Service_Academy1.Models.TraineeModuleResult", b =>
                {
                    b.HasOne("Service_Academy1.Models.EnrollmentModel", "Enrollment")
                        .WithMany()
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service_Academy1.Models.ModuleModel", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enrollment");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Service_Academy1.Models.TraineeQuizResultModel", b =>
                {
                    b.HasOne("Service_Academy1.Models.EnrollmentModel", "Enrollment")
                        .WithMany()
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Service_Academy1.Models.QuizModel", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enrollment");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Service_Academy1.Models.ActivitiesModel", b =>
                {
                    b.Navigation("TraineeActivities");
                });

            modelBuilder.Entity("Service_Academy1.Models.EvaluationQuestionModel", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("Service_Academy1.Models.ProgramsModel", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Enrollments");

                    b.Navigation("EvaluationQuestions");

                    b.Navigation("Modules");

                    b.Navigation("ProgramManagement");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("Service_Academy1.Models.QuestionModel", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Service_Academy1.Models.QuizModel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Service_Academy1.Models.TraineeQuizResultModel", b =>
                {
                    b.Navigation("TraineeAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
