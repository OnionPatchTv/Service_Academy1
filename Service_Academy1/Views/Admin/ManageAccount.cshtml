@using Microsoft.AspNetCore.Identity
@model ManageAccountViewModel
@inject UserManager<ApplicationUser> _userManager

@{
    ViewData["Title"] = "Manage Accounts";
}

@section Styles {
    <link rel="stylesheet" href="~/css/AdminStyle/ManageAccountStyle.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" integrity="sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
}

<div class="container">
    <div class="container-fluid mt-4 mb-5">
        <div class="row">
            <div class="col-lg-8">
                <!-- Success/Error Messages -->
                @if (TempData["SuccessMessage"] != null)
                {
                    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
                }
                @if (TempData["ErrorMessage"] != null)
                {
                    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
                }
            </div>
        </div>

        <div class="row">
            <div class="col-lg-8">
                <h2 class="mt-2">Create New Account</h2>
                @await Html.PartialAsync("_CreateAccountForm", Model.CreateAccountForm ?? new CreateAccountViewModel())
            </div>
            <div class="col-lg-4">
                <h4>Account Roles</h4>
                <ul class="list-group">
                    <li class="list-group-item"><strong>Administrator:</strong> Full permissions to manage LMS.</li>
                    <li class="list-group-item"><strong>Project Leader:</strong> Manage courses, enrollments, and grades.</li>
                    <li class="list-group-item"><strong>Trainee:</strong> Access courses, view grades, and track progress.</li>
                </ul>
            </div>
        </div>

        <div class="row mt-4">
            <div class="col-lg-12">
                <h2>Account Management</h2>
                <!-- Search and Filter -->
                <div class="search-filter-container">
                    <!-- Added class here -->
                    <div class="d-flex justify-content-between align-items-center mt-4">
                        <input type="text" id="searchAccount" class="form-control w-50" placeholder="Search..." onkeyup="filterAccounts()">
                        <select id="filterRole" class="form-control w-25 ml-2" onchange="filterAccounts()">
                            <option value="">Filter by Role</option>
                            <option value="Admin">Admin</option>
                            <option value="ProjectLeader">Project Leader</option>
                            <option value="Coordinator">Coordinator</option>
                        </select>
                    </div>
                </div>
                <div class="table-responsive">
                    <table id="accountTable" class="table table-striped">
                        <thead>
                            <tr>
                                <th>Email</th>
                                <th>Full Name</th>
                                <th>Role</th>
                                <th>Department</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.Users != null && Model.Users.Count > 0)
                            {
                                @foreach (var user in Model.Users)
                                {
                                    <tr>
                                        <td>@user.Email</td>
                                        <td>@user.FullName</td>
                                        <td>
                                            @{
                                                var roles = await _userManager.GetRolesAsync(user);
                                                @string.Join(", ", roles)
                                                ;
                                            }
                                        </td>
                                        <td>@user.DepartmentId</td>
                                        <td>
                                            <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#editAccountModal" data-userid="@user.Id" data-username="@user.UserName" data-email="@user.Email" data-fullname="@user.FullName" data-role="@string.Join(", ", await _userManager.GetRolesAsync(user))">
                                                Edit
                                            </button>
                                            <button class="btn btn-danger btn-sm" onclick="deleteAccount('@user.Id')">Delete</button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="5">No accounts found.</td>
                                </tr>
                            }
                        </tbody>

                    </table>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Edit Account Modal -->
<div class="modal fade" id="editAccountModal" tabindex="-1" role="dialog" aria-labelledby="editAccountModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editAccountModalLabel">Edit Account</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="border: none; background-color: transparent;">
                    <span aria-hidden="true" style="border: none; background-color: transparent;">&times;</span>
                </button>
            </div>
            <form asp-action="EditAccount" method="post">
                <div class="modal-body">
                    <input type="hidden" id="editUserId" name="Id" value="">

                    <div class="form-group">
                        <label for="editEmail">Email</label>
                        <input type="email" id="editEmail" class="form-control" name="Email" required>
                    </div>

                    <div class="form-group">
                        <label for="editFullName">Full Name</label>
                        <input type="text" id="editFullName" class="form-control" name="FullName" required>
                    </div>

                    <div class="form-group">
                        <label for="editRole">Role</label>
                        <select id="editRole" class="form-control" name="Role" required>
                            <option value="Admin">Admin</option>
                            <option value="ProjectLeader">Project Leader</option>
                            <option value="Coordinator">Coordinator</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" style="border: none; background-color: transparent;">Close</button>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
       
    <script src="~/js/AdminScript/passwordtoggle.js"></script>

    <script>
        function syncUsernameWithEmail() {
            document.getElementById("Username").value = document.getElementById("Email").value;
        }
        // Search/filter accounts
        function filterAccounts() {
            var searchValue = document.getElementById('searchAccount').value.toLowerCase();
            var roleFilter = document.getElementById('filterRole').value;
            var table = document.getElementById('accountTable');
            var rows = table.getElementsByTagName('tr');

            for (var i = 1; i < rows.length; i++) {
                var email = rows[i].cells[0].textContent.toLowerCase();
                var fullName = rows[i].cells[1].textContent.toLowerCase();
                var role = rows[i].cells[2].textContent;

                if ((email.includes(searchValue) || fullName.includes(searchValue)) &&
                    (role.includes(roleFilter) || roleFilter === '')) {
                    rows[i].style.display = '';
                } else {
                    rows[i].style.display = 'none';
                }
            }
        }

        // Pre-fill the Edit Account Modal with user data
        $('#editAccountModal').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget); // Button that triggered the modal
            var userId = button.data('userid');
            var email = button.data('email');
            var fullName = button.data('fullname');
            var role = button.data('role');

            var modal = $(this);
            modal.find('#editUserId').val(userId);
            modal.find('#editEmail').val(email);
            modal.find('#editFullName').val(fullName);
            modal.find('#editRole').val(role);
        });

        // AJAX call to delete an account
        function deleteAccount(userId) {
            if (confirm("Are you sure you want to delete this account?")) {
                $.ajax({
                    url: '/Admin/DeleteAccount',
                    type: 'POST',
                    data: { id: userId },
                    success: function (result) {
                        // Handle success (e.g., update the UI to remove the deleted row)
                        alert('Success!');
                        location.reload();
                    },
                    error: function (error) {
                        // Handle error
                        alert('Error occurred.');
                    }
                });
            }
        }
    </script>
}
